#!/bin/sh

set -euf

program_name="spawn"
xsock_dir='/tmp/.X11-unix'

S=$(printf '\t')
US=$(printf '\x1f')

exec 3>&2

show_usage() {
    cat <<EOF
Usage: $program_name [OPTIONS...] <image> [COMMAND [ARGS...]]

  -h, --help            Show usage information
  -n, --dry-run         Do not run, only print the resulting command
  --using-docker        Use docker run (default)
  --using-podman        Use podman run
  --name <name>         Set the name of the container
  --as-root             Pass --user=root to the runner
  --user <user>         Set user's HOME to /home/<user>
  --bind <path>         Mount the specified directory inside the container
  --bind-home <path>    Mount the specified directory as /home/<user>
  --with-gpu            Share host's GPU (/dev/dri)
  --with-x11            Share host's X11 socket and pass Xauthority
  --with-pulseaudio     Share host's PulseAudio socket and cookie
  --with-keepassxc      Share host's KeePassXC socket
  --with-secret <spec>  Export secrets from Secret Storage
  --with-certs <name>   Export certificates from trust store as <name>

  The <spec> argument to '--with-secret' should have the format:

      name: attribute value [attribute value]...

  The script will lookup a secret matching the specified attribute values using
  secret-tool and mount it as the /run/secrets/<name> inside the container. The
  colon after the name is optional.

EOF
}

print_args() {
    printf '<%s> ' "$@"
    printf '\n'
}

die() {
    local sts=$?
    [ $sts = 0 ] && sts=2
    [ $# = 0 ] || echo $program_name: $* >&3
    exit $sts
}

warn() {
    echo "$program_name warning: $*"
}

get_host_xdg_runtime_dir() {
    echo "${XDG_RUNTIME_DIR:-/run/user/${host_uid}}"
}

get_target_xdg_runtime_dir() {
    echo "/run/user/${target_uid}"
}

get_host_xdg_config_dir() {
    echo "${XDG_CONFIG_HOME:-${HOME:?}/.config}${1:+/$1}"
}

lookup_secret() {
    $secret_tool lookup "$@"
}

fetch_secrets() {
    local IFS=${US}
    local secrets_dir="$1"
    local arg name path secret

    for arg in $arg_secrets; do
        eval set -- "$arg"
        name=${1}
        name=$(echo "$name" | sed 's/:$//')
        shift
        path="$secrets_dir/$name"
        lookup_secret "$@" > "$path" || true
        secret=$(cat "$path")
        [ "$secret" ] ||
            die "could not find matching secret for '$name'"
    done
}

fetch_certs() {
    local IFS=${US}
    local secrets_dir="$1"

    trust extract --format=pem-bundle "$secrets_dir/$with_certs"
}

setup_devices() {
    if [ "${with_gpu-}" ]; then
        echo "'--device=/dev/dri'"
    fi
}

setup_user() {
    local target_home_dir

    if [ "${spawn_as_user-}" ]; then
        echo "'--user=${spawn_as_user}'"
    fi

    if [ "${spawn_home_dir-}" ]; then
        target_home_dir="/home/$spawn_user"
        echo "'--volume=$spawn_home_dir:$target_home_dir'"
    fi

    if [ "${spawn_user-}" ]; then
        echo "'--env=HOME=/home/$spawn_user'"
    fi
}

setup_bind_dirs() {
    [ "${spawn_bind_dirs-}" ] || return 0

    local IFS="$S"

    set -- $spawn_bind_dirs

    for dir; do
        echo "'--volume=$dir:$dir'"
    done
}

setup_runtime_dir() {
    [ "${spawn_runtime_dir-}" ] || return 0

    echo "'--volume=$spawn_runtime_dir:$target_runtime_dir'"
    echo "'--env=XDG_RUNTIME_DIR=$target_runtime_dir'"
}

setup_secrets_dir() {
    [ "${spawn_secrets_dir-}" ] || return 0

    echo "'--volume=$spawn_secrets_dir:/run/secrets'"
}

extract_xauth() {
    # Use wildcard authentication family because hostname of container can
    # differ from the host and default Xauthority files are hostname specific.
    # See http://stackoverflow.com/a/25280523 for details.
    xauth nlist "$DISPLAY" | sed 's/^..../ffff/' | xauth -f "$1" nmerge -
}

setup_x11() {
    local xauth_file xsock_file

    [ "${with_x11-}" ] || return 0

    xauth_file="$spawn_runtime_dir/Xauthority"

    touch "$xauth_file"
    extract_xauth "$xauth_file"
    chmod 666 "$xauth_file"

    xsock_file="$xsock_dir/X${DISPLAY#:}"

    echo "'--volume=$xsock_file:$xsock_file'"

    echo "'--env=DISPLAY=$DISPLAY'"
    echo "'--env=XAUTHORITY=$target_runtime_dir/Xauthority'"
}

get_pa_socket() {
    if [ "$(command -v pactl)" ]; then
        pactl info 2>/dev/null | \
            awk '/Server String: / { print $3 }' | \
            sed 's/^unix://'
    fi
}

setup_pulseaudio() {
    local sock_file cookie_file

    [ "${with_pulseaudio-}" ] || return 0

    sock_file=$(get_pa_socket)

    [ "$sock_file" ] ||
        die "passing of PulseAudio is enabled but the socket could not be found"
    [ -S "$sock_file" ] ||
        die "PulseAudio socket '$sock_file' is not exists or is not a socket"

    cookie_file=$(get_host_xdg_config_dir pulse)/cookie

    [ -f "$cookie_file" ] ||
        die "PulseAudio cookie file '$cookie_file' is not found"

    cp "$cookie_file" "$spawn_runtime_dir/pulse_cookie"
    chmod 666 "$spawn_runtime_dir/pulse_cookie"

    echo "'--volume=$sock_file:$target_runtime_dir/pulse_sock'"

    echo "'--env=PULSE_SERVER=$target_runtime_dir/pulse_sock'"
    echo "'--env=PULSE_COOKIE=$target_runtime_dir/pulse_cookie'"
}

setup_keepassxc() {
    local sock_name sock_path

    [ "${with_keepassxc-}" ] || return 0

    sock_name=org.keepassxc.KeePassXC.BrowserServer
    sock_path="app/org.keepassxc.KeePassXC/$sock_name"

    [ -S "$host_runtime_dir/$sock_path" ] || return 0

    echo "--volume=$host_runtime_dir/$sock_path:$target_runtime_dir/$sock_path"
}

cleanup() {
    if [ "${spawn_runtime_dir-}" ]; then
        rm -rf "$spawn_runtime_dir"
    fi
    if [ "${spawn_secrets_dir-}" ]; then
        rm -rf "$spawn_secrets_dir"
    fi
}

run_container() {
    local host_runtime_dir target_runtime_dir
    local run_interactive  run_tty

    trap cleanup EXIT

    host_runtime_dir=$(get_host_xdg_runtime_dir)

    if [ "${spawn_need_runtime_dir-}" ]; then
        target_runtime_dir=$(get_target_xdg_runtime_dir)
        spawn_runtime_dir=$(mktemp -dp "$host_runtime_dir" spawn.XXXXXXXXXX)
    fi

    if [ "${spawn_need_secrets_dir-}" ]; then
        spawn_secrets_dir=$(mktemp -dp "$host_runtime_dir" spawn.XXXXXXXXXX)
        if [ "${arg_secrets-}" ]; then
            fetch_secrets "$spawn_secrets_dir"
        fi
        if [ "${with_certs-}" ]; then
            fetch_certs "$spawn_secrets_dir"
        fi
    fi

    if [ -t 1 ]; then
        run_interactive=1
        run_tty=1
    fi

    eval ${E-} $spawn_mode run --rm           \
        ${run_interactive:+--interactive}     \
        ${run_tty:+--tty}                     \
        ${spawn_name:+--name="'$spawn_name'"} \
        $(setup_devices)                      \
        $(setup_user)                         \
        $(setup_bind_dirs)                    \
        $(setup_runtime_dir)                  \
        $(setup_secrets_dir)                  \
        $(setup_x11)                          \
        $(setup_pulseaudio)                   \
        $(setup_keepassxc)                    \
        "$@"
}

if [ $# = 0 ]; then
    show_usage
    exit 0
fi

options=$(getopt \
    -n "$program_name" \
    -o 'hn' \
    -l 'help' \
    -l 'using-docker' \
    -l 'using-podman' \
    -l 'name:' \
    -l 'user:' \
    -l 'as-root' \
    -l 'bind:' \
    -l 'bind-home:' \
    -l 'with-gpu' \
    -l 'with-x11' \
    -l 'with-pulseaudio' \
    -l 'with-keepassxc' \
    -l 'with-secret:' \
    -l 'with-certs:' \
    -- \
    "$@")

eval set -- "$options"

spawn_bind_dirs=
arg_secrets=

while [ $# -gt 0 ]; do
    case $1 in
        --) shift; break ;;
        -h|--help) show_usage; exit ;;
        -n|--dry-run) E='echo' ;;
        --using-docker)
            spawn_mode='docker' ;;
        --using-podman)
            spawn_mode='podman' ;;
        --name)
            spawn_name=${2-}
            shift ;;
        --as-root)
            spawn_as_user='root' ;;
        --user)
            spawn_user=${2-}
            shift ;;
        --bind)
            spawn_bind_dirs="${spawn_bind_dirs}${S}${2}"
            shift ;;
        --bind-home)
            spawn_home_dir="${2-}"
            shift ;;
        --with-gpu)
            with_gpu=1 ;;
        --with-x11)
            spawn_need_runtime_dir=1
            with_x11=1 ;;
        --with-pulseaudio)
            spawn_need_runtime_dir=1
            with_pulseaudio=1 ;;
        --with-keepassxc)
            spawn_need_runtime_dir=1
            with_keepassxc=1 ;;
        --with-secret)
            spawn_need_secrets_dir=1
            arg_secrets="${arg_secrets-}${US}${2}"
            shift ;;
        --with-certs)
            spawn_need_secrets_dir=1
            with_certs=${2-}
            shift ;;
        *) break ;;
    esac
    shift
done

spawn_bind_dirs=${spawn_bind_dirs#$S}
arg_secrets=${arg_secrets#$US}

: ${spawn_mode:=docker}

host_uid=$(id -u)
target_uid=$host_uid

[ "${spawn_home_dir-}" -a -z "${spawn_user-}" ] &&
    die "option '--bind-home' requires '--user'"

if [ "${arg_secrets}" ]; then
    secret_tool=$(command -v secret-tool) || true
    [ "${secret_tool-}" ] ||
        die "secret-tool is required to fetch secrets"
fi

if [ "${arg_certs-}" ]; then
    cert_tool=$(command -v trust) || true
    [ "${cert_tool}" ] ||
        die "trust command (p11-kit) is required to fetch certificates"
fi

run_container "$@"
