#!/bin/sh

set -eu

program_name="spawn"

S=$(printf '\t')
E=

spawn_user='dev'
xsock_dir='/tmp/.X11-unix'

# saving the stderr to allow showing error messages from subshells
exec 3>&2

show_usage() {
    cat <<EOF
Usage: $program_name [OPTIONS...] <name|directory> [--] [COMMAND [ARGS...]]

  Spawns new container or chroot and configures shared environment.

OPTIONS:

  -h|--help             Print this help message
  -r|--as-root          Use superuser inside the spawned root
  -n|--dry-run          Do not run any privileged commands - only print them
  --user <name>         Assume <name> user inside the container
  --arch <arch>         Set architecture reported by uname(2)
  --bind-home <dir>     Bind the specified directory as user home directory
  --with-ssh-agent      Pass SSH_AUTH_SOCK variable and bind the socket
  --with-x11            Pass DISPLAY, XAUTHORITY and bind $xsock_dir
  --with-pulseaudio     Set PULSE_SERVER and pass Pulseaudio socket
  --to-stderr           Redirect all container command output to stderr
  --share-devices       Share devices with the host when chrooting
  --using-docker        Run command in a new Docker container
  --using-chroot        Change the root directory using chroot
  --cleanup             Release mounts and unlock the root directory

SYNOPSIS:

  Unknown options before <name|directory> are passed to the selected launcher
  as arguments (docker run, chroot, etc.). Everything else after
  <name|directory> and optional '--' are considered the command to be invoked
  inside the spawned container or chroot.

  Options starting with '--using' are mutually exclusive -- only the last one
  will have an effect. If none was given and the first non option argument
  specifies an existing directory then chroot will be assumed, otherwise the
  name will be passed to 'docker run'.

NOTE:

  If you get "Connection failure: Protocol error" error or silent audio when
  trying to run PulseAudio applications inside the chroot, you need to disable
  communication through shared memory for the client. Add:

    enable-shm = no

  to "/etc/pulse/client.conf" inside the root directory.

EOF
}

parse_command_line() {
    local parsing_command= eoa= is_dir=

    while [ $# -gt 0 ]; do
        if [ "$parsing_command" ]; then
            spawn_command="${spawn_command-}${S}${1}"
        else
            case $1 in
                --)
                    parsing_command=1 ;;
                -h|--help) show_usage; exit ;;
                -r|--as-root)
                    spawn_user='root' ;;
                -n|--dry-run) E=echo ;;
                -u|--user)
                    spawn_user="$2"; shift ;;
                --arch)
                    spawn_arch="$2"; shift ;;
                --bind-home)
                    bind_home="$2"; shift ;;
                --with-ssh-agent)
                    with_ssh_agent=1 ;;
                --with-x11)
                    with_x11=1 ;;
                --with-pulseaudio)
                    with_pulseaudio=1 ;;
                --to-stderr)
                    to_stderr=1 ;;
                --share-devices)
                    share_devices=1 ;;
                --using-docker)
                    spawn_type='docker' ;;
                --using-nspawn)
                    spawn_type='nspawn' ;;
                --using-chroot)
                    spawn_type='chroot' ;;
                --cleanup)
                    do_cleanup=1 ;;
                -*)
                    spawn_args="${spawn_args}${S}$1" ;;
                *)
                    case ${spawn_type-} in
                        chroot|nspawn)
                            root_dir="$1" ;;
                        docker)
                            spawn_name="$1" ;;
                        '')
                            if [ -d "$1" ]; then
                                if [ "$(command -v systemd-nspawn)" ]; then
                                    spawn_type="nspawn"
                                else
                                    spawn_type="chroot"
                                fi
                                root_dir="$1"
                            else
                                [ "$1" = "${1#*/}" ] || \
                                    die "the directory '$1' does not exist"
                                if [ "$(command -v docker)" ]; then
                                    if docker_image_exists "$1"; then
                                        spawn_type="docker"
                                        spawn_name="$1"
                                    else
                                        die "the container '$1' does not exist"
                                    fi
                                else
                                    die "the name '$1' is not a directory and \
unable to check if it is a container because Docker was not found"
                                fi
                            fi ;;
                    esac
                    parsing_command=1
                    # allow optional '--' after the first non-option argument
                    [ "${2-}" = '--' ] && shift
                    ;;
            esac
        fi
        shift
    done

    spawn_args="${spawn_args:+${spawn_args#$S}}"
    spawn_command="${spawn_command:+${spawn_command#$S}}"
}

validate_environment() {
    if [ -z "${root_dir-}" ] && [ -z "${spawn_name-}" ]; then
        die "root directory or image name to spawn is not specified"
    fi

    case $spawn_type in
        chroot|nspawn)
            [ "${root_dir-}" ] ||
                die "root directory is not specified"
            [ -d "$root_dir" ] ||
                die "the specified root directory '$root_dir' is not exists"
            [ -f "$root_dir/etc/passwd" ] ||
                die "/etc/passwd is not exists in '$root_dir'"
            user_exists "$spawn_user" ||
                die "the specified user '$spawn_user' is not found in '$root_dir'"
            ;;
        docker)
            [ "${spawn_name-}" ] ||
                die "container name is not specified"
            [ "$(command -v docker)" ] ||
                die "docker command was not found"
            docker_image_exists "$spawn_name" ||
                die "the specified container image '$spawn_name' is not exists"
    esac

    case $spawn_type in
        nspawn)
            [ "$(command -v systemd-nspawn)" ] ||
                die "systemd-nspawn command was not found"
            ;;
        chroot)
            [ "$(command -v dirname)" ] ||
                die "dirname command was not found"
            [ "$(command -v realpath)" ] ||
                die "realpath command was not found"
            [ "$(command -v awk)" ] ||
                die "awk command was not found"
            [ "$(command -v tac)" ] ||
                die "tac command was not found"
            [ "$(command -v unshare)" ] ||
                die "unshare command was not found"

            chroot=$(command -v chroot)
            if [ -z "$chroot" ]; then
                chroot="/usr/sbin/chroot"
            fi
            if ! [ -x "$chroot" ]; then
                die "chroot command was not found"
            fi

            ;;
    esac

    case $spawn_type in
        nspawn|docker)
            if [ "${share_devices-}" ]; then
                die "the '--share-devices' option is valid only for chroot mode"
            fi ;;
    esac
}

die() {
    local sts=$?
    [ $sts = 0 ] && sts=2
    [ $# = 0 ] || echo Error: $* >&3
    exit $sts
}

warn() {
    echo "Warning: $*"
}

su_run() {
    if [ "${UID:?}" = "0" ]; then
        $E "$@"
    else
        $E sudo "$@"
    fi
}

escape_quote() {
    local arg= result=
    for arg; do
        arg=$(printf "%s" "$arg" | sed "s/'/'\\\''/g")
        result="$result${S}'$arg'"
    done
    printf '%s' "$result"
}

escape_mounts() {
    # See getmntent(3) for details. This many backslashes are needed to escape
    # it from shell as well as awk when passing the value.
    printf '%s' "$1" | sed -e 's/\o040/\\040/g' \
                           -e 's/\o011/\\011/g' \
                           -e 's/\o012/\\012/g' \
                           -e 's/\\/\\\\\\\\/g'
}

unescape_mounts() {
    # see getmntent(3) for details
    printf '%s' "$1" | sed -e 's/\\040/\o040/g' \
                           -e 's/\\011/\o011/g' \
                           -e 's/\\012/\o012/g' \
                           -e 's/\\134/\o134/g'
}

docker_image_exists() {
    [ "$(command -v docker)" ] || return
    docker images | grep -q "^\b${1:?}\b"
}

user_exists() {
    grep -q "^$1:" "$root_dir/etc/passwd"
}

find_user_info() {
    local field="$1"
    if [ "${root_dir-}" ]; then
        [ -f "$root_dir/etc/passwd" ] || return
        while IFS=: read -r user pass uid gid gecos home shell; do
            if [ "$user" = "$spawn_user" ]; then
                eval "echo \$$field"
                break
            fi
        done < "$root_dir/etc/passwd"
    else
        case $spawn_user in
            root)
                case $field in
                     user) echo root ;;
                      uid) echo 0 ;;
                      gid) echo 0 ;;
                     home) echo /root ;;
                    shell) echo /bin/bash ;;
                esac ;;
            dev)
                case $field in
                     user) echo $spawn_user ;;
                      uid) echo 1000 ;;
                      gid) echo 100  ;;
                     home) echo /home/$spawn_user ;;
                    shell) echo /bin/bash ;;
                esac ;;
            *)
                case $field in
                     user) echo $spawn_user ;;
                     home) echo /home/$spawn_user ;;
                    shell) echo /bin/bash ;;
                        *) die "unable to find the value of '$field' for \
the specified user '$spawn_user', the feature is not supported for Docker \
containers"
                esac ;;
        esac
    fi
}

get_my_config_dir() {
    echo "${XDG_CONFIG_HOME:-${HOME:?}/.config}${1:+/$1}"
}

get_config_dir() {
    local home_dir= config_dir=
    home_dir=$(find_user_info home)
    config_dir="${home_dir:?}/.config"

    echo "$config_dir${1:+/$1}"
}

get_my_runtime_dir() {
    echo "${XDG_RUNTIME_DIR:-/run/user/${UID:?}}${1:+/$1}"
}

get_runtime_dir() {
    local uid= runtime_dir=
    uid=$(find_user_info uid)
    runtime_dir="/run/user/${uid:?}"

    echo "$runtime_dir${1:+/$1}"
}

get_pa_socket() {
    if [ "$(command -v pactl)" ]; then
        pactl info 2>/dev/null | \
            awk '/Server String: / { print $3 }' | \
            sed 's/^unix://'
    fi
}

get_command() {
    local IFS="$S"
    case $spawn_type in
        chroot)
            if [ "$spawn_command" ]; then
                echo "$(escape_quote $spawn_command)"
            else
                echo "/bin/sh -c 'cd && exec /bin/bash -l'"
            fi ;;
        nspawn)
            if [ "$spawn_command" ]; then
                echo "$spawn_command"
            else
                echo "/bin/sh${S}-c${S}cd && exec /bin/bash -l"
            fi ;;
        docker)
            echo "${spawn_command-}" ;;
    esac
}

root_mkdir() {
    local uid= gid=
    uid=$(find_user_info uid); gid=$(find_user_info gid)
    su_run install -o "${uid:?}" -g "${gid:?}" ${2:+"-m$2"} -d "${root_dir:?}${1:?}"
}

get_lock_filename() {
    local dir="$(dirname "${1:?}")" name="$(basename "${1:?}")"
    echo "${dir:?}/.${program_name:?}.${name:?}.lock"
    # the scheme used by systemd-nspawn
    # echo "${dir}/.#${name}.lck"
}

is_locked() {
    test -f "$(get_lock_filename "${1:?}")"
}

lock_dir() {
    su_run touch "$(get_lock_filename "${1:?}")"
}

unlock_dir() {
    su_run rm -f "$(get_lock_filename "${1:?}")"
}

get_userspec_arg() {
    local uid= gid=
    uid=$(find_user_info uid); gid=$(find_user_info gid)
    echo "--userspec=${uid:?}:${gid:?}"
}

add_user_arg() {
    local _A= uid=
    uid=$(find_user_info uid)

    case $spawn_type in
        nspawn|docker)
            _A="--user=$uid" ;;
    esac

    eval "${1}=\"\$${1}$S$_A\""
}

make_setarch() {
    case ${spawn_arch-} in
        x86|i?86)
            echo "linux32" ;;
        x86-64|x86_64|amd64)
            echo "linux64" ;;
        '') ;;
         *) die "unknown arch '$spawn_arch'" ;;
    esac
}

make_env_arg() {
    local value="$1"
    case $spawn_type in
        chroot) echo "$value" ;;
        nspawn) echo "--setenv=$value" ;;
        docker) echo "--env=$value" ;;
    esac
}

make_bind_arg() {
    local value="$1"
    case $spawn_type in
        nspawn) echo "--bind=$value" ;;
        docker) echo "--volume=$value" ;;
    esac
}

setup_runtime_env() {
    local _A= uid= gid= config_dir=

    uid=$(find_user_info uid)
    gid=$(find_user_info gid)
    config_dir=$(get_config_dir)

    my_runtime_dir=$(mktemp -dp "$(get_my_runtime_dir)" spawn.XXXXXXXXXX)
    runtime_dir=$(get_runtime_dir)

    case $spawn_type in
        chroot)
            _A="$_A$S$(make_env_arg TERM=${TERM-})"
            _A="$_A$S$(make_env_arg HOME=$spawn_home)"
            _A="$_A$S$(make_env_arg USER=$spawn_user)"
            _A="$_A$S$(make_env_arg LOGNAME=$spawn_user)"

            if [ "$spawn_user" = "root" ]; then
                _A="$_A$S$(make_env_arg PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin)"
            else
                _A="$_A$S$(make_env_arg PATH=/usr/local/bin:/usr/bin:/bin)"
            fi

            root_mkdir "$runtime_dir"
            ;;
        *)
            _A="$_A$S$(make_bind_arg $my_runtime_dir:$runtime_dir)"
            ;;

    esac

    _A="$_A$S$(make_env_arg "XDG_RUNTIME_DIR=$runtime_dir")"
    _A="$_A$S$(make_env_arg "XDG_CONFIG_HOME=$config_dir")"

    if [ "${root_dir-}" ]; then
        root_mkdir "$config_dir"
    fi

    eval "${1}=\"\$${1}$S$_A\""
}

setup_system_env() {
    local SYS_A=

    case $spawn_type in
        chroot)
            su_run touch "$root_dir/etc/resolv.conf"
            su_run mount --bind "/etc/resolv.conf" "$root_dir/etc/resolv.conf"
            ;;
        nspawn)
            SYS_A="$SYS_A$S$(make_bind_arg "/etc/resolv.conf:/etc/resolv.conf")"
            ;;
    esac

    if [ -f /etc/localtime ]; then
        case $spawn_type in
            chroot)
                su_run touch "$root_dir/etc/localtime"
                su_run mount --bind "/etc/localtime" "$root_dir/etc/localtime"
                ;;
            nspawn)
                SYS_A="$SYS_A$S$(make_bind_arg "/etc/localtime:/etc/localtime")"
                ;;
        esac
    fi

    eval "${1}=\"\$${1}$S$SYS_A\""
}

setup_ssh_env() {
    local SSH_A= uid=

    [ "${with_ssh_agent-}" ] || return 0

    [ "${SSH_AUTH_SOCK-}" ] ||
        die "passing of SSH agent is enabled but SSH_AUTH_SOCK is not set"
    [ -S "$SSH_AUTH_SOCK" ] ||
        die "$SSH_AUTH_SOCK socket is not exists or is not a socket"

    uid=$(find_user_info uid)

    SSH_A="$SSH_A$S$(make_env_arg "SSH_AUTH_SOCK=$runtime_dir/ssh")"

    case $spawn_type in
        chroot)
            su_run touch "$my_runtime_dir/ssh"
            su_run mount --bind "$SSH_AUTH_SOCK" "$my_runtime_dir/ssh"
            ;;
        *)
            SSH_A="$SSH_A$S$(make_bind_arg "$SSH_AUTH_SOCK:$runtime_dir/ssh")"
            ;;
    esac

    local current_uid=${UID:-$(id -u)}

    if [ "${current_uid:?}" != "$uid" ]; then
        warn "current UID ($current_uid) does not match UID inside the container \
($uid) but SSH agent socket sharing is requested -- changing $SSH_AUTH_SOCK \
mode to world writeable/readable (666)"
        chmod 666 "$SSH_AUTH_SOCK"
    fi

    eval "${1}=\"\$${1}$S$SSH_A\""
}

setup_x11_env() {
    local X11_A= xauth_file=

    [ "${with_x11-}" ] || return 0

    [ "${DISPLAY-}" ] ||
        die "passing of X11 environment is enabled but DISPLAY is not set"
    [ -d "$xsock_dir" ] ||
        die "X11 socket directory '$xsock_dir' is not exists"

    xauth_file="$my_runtime_dir/Xauthority"
    touch "$xauth_file"
    extract_xauth "$xauth_file"
    chmod 666 "$xauth_file"

    X11_A="$X11_A$S$(make_env_arg "DISPLAY=$DISPLAY")"
    X11_A="$X11_A$S$(make_env_arg "XAUTHORITY=$runtime_dir/Xauthority")"

    # disable Qt's usage of shared memory which we do not expose
    X11_A="$X11_A$S$(make_env_arg QT_X11_NO_MITSHM=1)"

    # Exposing whole X11 socket directory is probably a bad idea, hopefully
    # assuming that most users are running single X11 instance.

    case $spawn_type in
        chroot)
            su_run mkdir -p "$root_dir$xsock_dir"
            su_run mount --bind "$xsock_dir" "$root_dir$xsock_dir"
            ;;
        *)
            X11_A="$X11_A$S$(make_bind_arg "$xsock_dir:$xsock_dir")"
            ;;
    esac

    eval "${1}=\"\$${1}$S$X11_A\""
}

setup_pa_env() {
    local PA_A= sock_file= cookie_file=

    [ "${with_pulseaudio-}" ] || return 0

    sock_file=$(get_pa_socket)

    [ "$sock_file" ] ||
        die "passing of PulseAudio is enabled but the socket could not be found"
    [ -S "$sock_file" ] ||
        die "PulseAudio socket '$sock_file' is not exists or is not a socket"

    cookie_file=$(get_my_config_dir pulse)/cookie
    [ -f "$cookie_file" ] ||
        die "PulseAudio cookie file '$cookie_file' is not found"
    cp "$cookie_file" "$my_runtime_dir/pulse_cookie"
    chmod 666 "$my_runtime_dir/pulse_cookie"

    PA_A="$PA_A$S$(make_env_arg "PULSE_SERVER=$runtime_dir/pulse_sock")"
    PA_A="$PA_A$S$(make_env_arg "PULSE_COOKIE=$runtime_dir/pulse_cookie")"

    case $spawn_type in
        chroot)
            su_run touch "$my_runtime_dir/pulse_sock"
            su_run mount --bind "$sock_file" "$my_runtime_dir/pulse_sock"
            ;;
        *)
            PA_A="$PA_A$S$(make_bind_arg "$sock_file:$runtime_dir/pulse_sock")"
            ;;
    esac

    eval "${1}=\"\$${1}$S$PA_A\""
}

setup_home_env() {
    local HOME_A=

    [ "${bind_home-}" ] || return 0

    [ -d "$bind_home" ] ||
        die "the bind directory '$bind_home' is not exists"

    if [ "${root_dir-}" ]; then
        root_mkdir "$spawn_home"
    fi

    case $spawn_type in
        chroot)
            su_run mount --bind "$bind_home" "$root_dir$spawn_home"
            ;;
        *)
            HOME_A="$HOME_A$S$(make_bind_arg "$bind_home:$spawn_home")"
            ;;
    esac

    eval "${1}=\"\$${1}$S$HOME_A\""
}

setup_env() {
    add_user_arg      "$1"
    setup_runtime_env "$1"
    setup_system_env  "$1"
    setup_ssh_env     "$1"
    setup_x11_env     "$1"
    setup_pa_env      "$1"
    setup_home_env    "$1"
}

extract_xauth() {
    # Use wildcard authentication family because hostname of container can
    # differ from the host and default Xauthority files are hostname specific.
    # See http://stackoverflow.com/a/25280523 for details.
    xauth nlist "$DISPLAY" | sed 's/^..../ffff/' | xauth -f "$1" nmerge -
}

cleanup() {
    local root= path=
    unset IFS; set +eu

    if [ "${root_dir-}" ]; then
        root=$(escape_mounts "$(realpath "$root_dir")")
        for path in $(awk -v r="^$root" '$2~r {print $2}' /proc/mounts | sort -r); do
            su_run umount "$(unescape_mounts "$path")"
        done
    fi

    if [ "${my_runtime_dir-}" ]; then
        root=$(escape_mounts "$(realpath "$my_runtime_dir")")
        for path in $(awk -v r="^$root" '$2~r {print $2}' /proc/mounts | sort -r); do
            su_run umount "$(unescape_mounts "$path")"
        done
        rm -rf "$my_runtime_dir"
    fi

    if [ "${root_dir-}" ]; then
        unlock_dir "$root_dir"
        sync
    fi
}

spawn_root_chroot() {
    local IFS="$S" arch= env= cmd=

    trap cleanup EXIT

    arch=$(make_setarch)
    setup_env env

    cmd=$(cat <<EOF
set -e
mount -t proc proc "$root_dir/proc"
EOF
)

    if [ "${share_devices-}" ]; then
        su_run mkdir -p "$root_dir/dev" "$root_dir/sys"
        su_run mount --rbind /dev "$root_dir/dev"
        su_run mount --make-rslave "$root_dir/dev"
        su_run mount --rbind /sys "$root_dir/sys"
        su_run mount --make-rslave "$root_dir/sys"
    else
        cmd="$cmd; $(cat <<EOF
mount -t tmpfs -o nosuid tmpfs "$root_dir/dev"
mkdir -p "$root_dir/dev/shm" "$root_dir/dev/pts"
mount -t tmpfs -o nosuid,nodev shm "$root_dir/dev/shm"
mount -t devpts -o nosuid,noexec,gid=5,mode=620,ptmxmode=666,newinstance devpts "$root_dir/dev/pts"
ln -snf pts/ptmx "$root_dir/dev/ptmx"
ln -snf /proc/self/fd "$root_dir/dev/fd"
ln -snf /proc/self/fd/0 "$root_dir/dev/stdin"
ln -snf /proc/self/fd/1 "$root_dir/dev/stdout"
ln -snf /proc/self/fd/2 "$root_dir/dev/stderr"
mknod "$root_dir/dev/null" c 1 3
mknod "$root_dir/dev/zero" c 1 5
mknod "$root_dir/dev/random" c 1 8
mknod "$root_dir/dev/urandom" c 1 9
mknod "$root_dir/dev/console" c 5 1
mknod "$root_dir/dev/tty" c 5 0
chmod 666 "$root_dir/dev/null" "$root_dir/dev/zero" "$root_dir/dev/random" \
    "$root_dir/dev/urandom" "$root_dir/dev/tty"
chmod 600 "$root_dir/dev/console"
mount -t sysfs sysfs "$root_dir/sys"
EOF
)"
    fi

    cmd="$cmd; $(cat <<EOF
mount --rbind "$my_runtime_dir" "$root_dir$runtime_dir"
$chroot $(get_userspec_arg) "$root_dir" $(get_command)
EOF
)"

    $E su_run $arch env - $env unshare -mpf /bin/sh -c "$cmd"
}

spawn_root_nspawn() {
    local IFS="$S" A=

    trap cleanup EXIT

    # systemd-nspawn runs 'getent passwd <user>' inside the container to get
    # passwd entry for the user or fails with "Failed to resolve user <user>"

    setup_env A

    $E su_run systemd-nspawn $A ${spawn_args-} -D "$root_dir" -- $(get_command)
}

spawn_root_docker() {
    local IFS="$S" A= it_arg=

    trap cleanup EXIT

    setup_env A

    if [ "${spawn_command-}" ]; then
        if [ "${to_stderr-}" ]; then
            exec 1>&2
        fi
    else
        it_arg='-it'
    fi

    $E docker run --rm $it_arg $A ${spawn_args-} $spawn_name $(get_command)
}

if [ $# = 0 ]; then
    show_usage
    exit
fi

parse_command_line "$@"
validate_environment

if [ "${do_cleanup-}" ]; then
    cleanup
    exit
fi

spawn_home=$(find_user_info home)
[ "$spawn_home" ] ||
    die "failed to find user's home directory"

if [ "${spawn_name-}" ]; then
    spawn_root_docker
elif [ "${root_dir-}" ]; then
    if is_locked "$root_dir"; then
        die "the directory '$root_dir' is locked by another spawn instance, \
use '--cleanup' option to remove stale locks"
    fi
    lock_dir "$root_dir"

    if [ "$spawn_type" = 'nspawn' ]; then
        spawn_root_nspawn
    else
        spawn_root_chroot
    fi
else
    die "container name or chroot directory is not specified"
fi
